type Query {
    allUsers(is_active:Boolean):[User]
    getOneUser(id:ID,email:String):User
}

type Mutation {
    newUser(data:UserAdd!):User
    updateUser(data:UserUpdate!,id:ID!):User
    deleteUser(id:ID!):Message
}

type Message {
    code:Int
    message:String
}

input UserAdd {
    first_name:String!
    last_name:String!
    email:String!
    password:String
    birth_date:String
    gender:GENDER
    photo:String

}

input UserUpdate {
    first_name:String
    last_name:String
    email:String
    password:String
    birth_date:String
    gender:GENDER
    photo:String
    is_active: Boolean
}

type User{
    _id:ID!
    first_name:String!
    last_name:String!
    birth_date:String
    email:String!
    gender:GENDER #Esto es un commet
    events_created:[Event]
    events_assist:[Event]
    photo:String
    is_active:Boolean
}

type Event{
    _id:ID!
    title:String!
    description:String!
    date:String
    address:Address
    assistants:[User]
    created_by:User!
    banner:String
    tags:[String]
    is_active:Boolean!

}

type Address {
    street:String!
    number:String
    city:String
    state:String
    country:String
    zip:String
}



enum GENDER {
    M
    F
    O
}








